(ns blog.views.utils
  (:use [noir.core :only [defpartial]])
  (:require [noir.session :as session]))

(defn flash-message [content type]
  "Type should be one of :alert, :success, :standard or :secondary"
  (session/flash-put! :messages (list {:type type :content content})))

;;; Creates html paragraps per paragraph in the content.
;;; Also adds an h1 to the first line.
;;; This should probably parse markdown in the future
(defpartial format-post-content [content]
  (let [paragraphs (clojure.string/split content #"(\r|\n)+")]
    (conj (map (fn [p] [:p p]) (rest paragraphs))
          [:h1 (first paragraphs)])))

(defpartial format-comment-content [content]
  (let [paragraphs (clojure.string/split content #"(\r|\n)+")]
    (map (fn [p] [:p p]) paragraphs)))

(def html-escapes
  {\‘ "&lsquo;"
   \’ "&rsquo;"
   \‚ "&sbquo;"
   \“ "&ldquo;"
   \” "&rdquo;"
   \„ "&bdquo;"
   \† "&dagger;"
   \‡ "&Dagger;"
   \‰ "&permil;"
   \‹ "&lsaquo;"
   \› "&rsaquo;"
   \♠ "&spades;"
   \♣ "&clubs;"
   \♥ "&hearts;"
   \♦ "&diams;"
   \‾ "&oline;"
   \← "&larr;"
   \↑ "&uarr;"
   \→ "&rarr;"
   \↓ "&darr;"
   \™ "&trade;"
   \- "&#00;"
   \! "&#33;"
   \" "&quot;"
   \# "&#35;"
   \$ "&#36;"
   \% "&#37;"
   \' "&#39;"
   \( "&#40;"
   \) "&#41;"
   \* "&#42;"
   \+ "&#43;"
   \, "&#44;"
   \. "&#46;"
   \/ "&frasl;"
   \: "&#58;"
   \< "&lt;"
   \= "&#61;"
   \> "&gt;"
   \? "&#63;"
   \@ "&#64;"
   \[ "&#91;"
   \\ "&#92;"
   \] "&#93;"
   \^ "&#94;"
   \_ "&#95;"
   \` "&#96;"
   \{ "&#123;"
   \| "&#124;"
   \} "&#125;"
   \~ "&#126;"
   \… "&hellip;"
   \– "&ndash;"
   \— "&mdash;"
   \¡ "&iexcl;"
   \¢ "&cent;"
   \£ "&pound;"
   \¤ "&curren;"
   \¥ "&yen;"
   \¦ "&brkbar;"
   \§ "&sect;"
   \¨ "&die;"
   \© "&copy;"
   \ª "&ordf;"
   \« "&laquo;"
   \¬ "&not;"
   \­ "&shy;"
   \® "&reg;"
   \¯ "&hibar;"
   \° "&deg;"
   \± "&plusmn;"
   \² "&sup2;"
   \³ "&sup3;"
   \´ "&acute;"
   \µ "&micro;"
   \¶ "&para;"
   \· "&middot;"
   \¸ "&cedil;"
   \¹ "&sup1;"
   \º "&ordm;"
   \» "&raquo;"
   \¼ "&frac14;"
   \½ "&frac12;"
   \¾ "&frac34;"
   \¿ "&iquest;"
   \À "&Agrave;"
   \Á "&Aacute;"
   \Â "&Acirc;"
   \Ã "&Atilde;"
   \Ä "&Auml;"
   \Å "&Aring;"
   \Æ "&AElig;"
   \Ç "&Ccedil;"
   \È "&Egrave;"
   \É "&Eacute;"
   \Ê "&Ecirc;"
   \Ë "&Euml;"
   \Ì "&Igrave;"
   \Í "&Iacute;"
   \Î "&Icirc;"
   \Ï "&Iuml;"
   \Ð "&ETH;"
   \Ñ "&Ntilde;"
   \Ò "&Ograve;"
   \Ó "&Oacute;"
   \Ô "&Ocirc;"
   \Õ "&Otilde;"
   \Ö "&Ouml;"
   \× "&times;"
   \Ø "&Oslash;"
   \Ù "&Ugrave;"
   \Ú "&Uacute;"
   \Û "&Ucirc;"
   \Ü "&Uuml;"
   \Ý "&Yacute;"
   \Þ "&THORN;"
   \ß "&szlig;"
   \à "&agrave;"
   \á "&aacute;"
   \â "&acirc;"
   \ã "&atilde;"
   \ä "&auml;"
   \å "&aring;"
   \æ "&aelig;"
   \ç "&ccedil;"
   \è "&egrave;"
   \é "&eacute;"
   \ê "&ecirc;"
   \ë "&euml;"
   \ì "&igrave;"
   \í "&iacute;"
   \î "&icirc;"
   \ï "&iuml;"
   \ð "&eth;"
   \ñ "&ntilde;"
   \ò "&ograve;"
   \ó "&oacute;"
   \ô "&ocirc;"
   \õ "&otilde;"
   \ö "&ouml;"
   \÷ "&divide;"
   \ø "&oslash;"
   \ù "&ugrave;"
   \ú "&uacute;"
   \û "&ucirc;"
   \ü "&uuml;"
   \ý "&yacute;"
   \þ "&thorn;"
   \ÿ "&yuml;"})

(defn escape-html [html]
  (clojure.string/escape html html-escapes))